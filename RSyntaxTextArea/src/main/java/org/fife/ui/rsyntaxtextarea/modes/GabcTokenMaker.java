// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: gabc.flex

package org.fife.ui.rsyntaxtextarea.modes;

import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenMakerBase;
import org.fife.ui.rsyntaxtextarea.TokenTypes;

import javax.swing.text.Segment;
import java.io.IOException;


public class GabcTokenMaker extends TokenMakerBase {

	/**
	 * This character denotes the end of file
	 */
	public static final int YYEOF = -1;

	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;
	public static final int PROPERTY_VALUE = 2;
	public static final int CODE = 4;
	public static final int NOTATION = 6;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non-negative integer
	 */
	private static final int[] ZZ_LEXSTATE = {
		0, 0, 1, 1, 2, 2, 3, 3
	};

	/**
	 * Top-level table for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

	private static final String ZZ_CMAP_TOP_PACKED_0 =
		"\1\0\u10ff\u0100";

	private static int[] zzUnpackcmap_top() {
		int[] result = new int[4352];
		int offset = 0;
		offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Second-level tables for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

	private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
		"\11\0\1\1\1\2\2\0\1\3\22\0\1\4\1\5" +
		"\1\0\1\6\1\7\1\10\2\0\1\11\1\12\1\0" +
		"\1\13\1\0\1\14\1\0\1\15\1\16\5\17\4\20" +
		"\1\21\1\22\1\23\1\24\1\25\1\26\1\27\16\30" +
		"\1\31\1\30\1\31\1\32\3\31\2\32\2\33\1\31" +
		"\1\34\1\0\1\35\1\0\1\36\1\0\1\37\1\40" +
		"\1\41\1\30\1\42\3\30\1\43\2\30\1\44\1\30" +
		"\1\45\1\32\1\46\1\32\1\47\1\50\1\51\1\52" +
		"\1\53\1\32\2\54\1\31\1\55\1\56\1\55\1\24" +
		"\u0181\0";

	private static int[] zzUnpackcmap_blocks() {
		int[] result = new int[512];
		int offset = 0;
		offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
		"\4\0\1\1\3\2\1\1\1\3\1\4\1\5\1\6" +
		"\2\1\1\7\1\1\1\10\1\11\1\12\1\13\1\14" +
		"\1\10\1\15\1\16\1\12\4\14\1\12\1\17\1\20" +
		"\1\6\1\21\11\0\1\11\1\0\2\14\1\22\7\0";

	private static int[] zzUnpackAction() {
		int[] result = new int[56];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\57\0\136\0\215\0\274\0\353\0\274\0\u011a" +
		"\0\u0149\0\u0178\0\274\0\u01a7\0\u01d6\0\u0205\0\u0234\0\274" +
		"\0\u0263\0\274\0\274\0\u0292\0\274\0\274\0\u02c1\0\274" +
		"\0\274\0\274\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db" +
		"\0\274\0\274\0\274\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6" +
		"\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e" +
		"\0\274\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[56];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length() - 1;
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpacktrans();

	private static final String ZZ_TRANS_PACKED_0 =
		"\1\5\1\6\1\7\1\10\1\6\3\5\1\11\3\5" +
		"\1\12\4\5\1\13\6\5\4\12\3\5\16\12\2\5" +
		"\1\14\1\6\2\14\1\6\15\14\1\15\34\14\1\5" +
		"\1\6\1\7\1\10\1\6\2\5\1\16\1\17\1\20" +
		"\11\5\1\21\31\5\1\22\2\5\1\6\1\7\1\10" +
		"\1\6\1\23\1\24\3\5\1\25\1\5\1\26\1\27" +
		"\5\5\3\26\1\5\1\30\1\31\1\5\1\26\1\32" +
		"\2\5\1\33\10\31\1\34\1\35\2\5\1\36\1\37" +
		"\1\5\1\31\60\0\1\6\2\0\1\6\54\0\1\7" +
		"\60\0\1\40\3\0\1\41\62\0\1\12\13\0\4\12" +
		"\3\0\16\12\2\0\1\14\1\0\2\14\1\0\15\14" +
		"\1\0\34\14\22\0\1\42\34\0\1\43\4\0\52\43" +
		"\4\0\1\40\67\0\1\44\21\0\1\45\1\46\1\47" +
		"\1\50\1\46\1\0\1\51\2\0\1\52\1\53\1\54" +
		"\1\46\11\0\1\32\17\0\1\32\35\0\1\23\7\0" +
		"\1\55\1\23\15\0\1\56\40\0\2\26\55\0\1\26" +
		"\110\0\1\57\61\0\1\60\31\0\1\32\30\0\2\40" +
		"\1\0\54\40\37\0\1\45\1\46\1\47\1\50\1\46" +
		"\1\0\1\51\2\0\1\52\1\53\1\54\1\46\47\0" +
		"\1\53\37\0\1\61\56\0\1\61\16\0\1\62\37\0" +
		"\1\61\24\0\1\46\50\0\1\63\53\0\1\46\4\0" +
		"\1\46\61\0\1\46\51\0\1\46\27\0\1\55\54\0" +
		"\2\64\1\0\3\65\106\0\1\26\61\0\1\26\45\0" +
		"\1\66\54\0\1\67\34\0\3\65\54\0\3\65\14\0" +
		"\1\23\60\0\1\70\56\0\1\46\66\0\1\46\7\0";

	private static int[] zzUnpacktrans() {
		int[] result = new int[1974];
		int offset = 0;
		offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpacktrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String[] ZZ_ERROR_MSG = {
		"Unknown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\4\0\1\11\1\1\1\11\3\1\1\11\4\1\1\11" +
		"\1\1\2\11\1\1\2\11\1\1\3\11\6\1\3\11" +
		"\11\0\1\1\1\0\2\1\1\11\7\0";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[56];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/**
	 * Number of newlines encountered up to the start of the matched text.
	 */
	@SuppressWarnings("unused")
	private int yyline;

	/**
	 * Number of characters from the last newline up to the start of the matched text.
	 */
	@SuppressWarnings("unused")
	protected int yycolumn;

	/**
	 * Number of characters up to the start of the matched text.
	 */
	@SuppressWarnings("unused")
	private long yychar;

	/**
	 * Whether the scanner is currently at the beginning of a line.
	 */
	@SuppressWarnings("unused")
	private boolean zzAtBOL = true;

	/**
	 * Whether the user-EOF-code has already been executed.
	 */
	@SuppressWarnings("unused")
	private boolean zzEOFDone;

	/* user code: */
	public GabcTokenMaker() {
	}

	void addToken(int tokenType) {
		super.addToken(text.array, text.offset + zzStartRead, text.offset + zzMarkedPos - 1, tokenType, startOffset + zzStartRead);
	}

	public static int encodeLexerState(int state) {
		return -(state * 10 + 7);
	}

	public static int decodeLexerState(int encoded) {
		return (-encoded - 7) / 10;
	}

	Segment text;
	int startOffset;

	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[]{"% ", null};
	}

	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
		resetTokenList();

		try {
			this.text = text;
			this.startOffset = startOffset;
			reset(text, 0, text.count, initialTokenType < 0 ? decodeLexerState(initialTokenType) : initialTokenType);
			yylex();
		} catch (IOException e) {
			throw new RuntimeException(e);
		}

		super.addToken(text, startOffset, startOffset - 1, encodeLexerState(yystate()), startOffset);

		return firstToken;
	}

	/**
	 * Translates raw input code points to DFA table row
	 */
	private static int zzCMap(int input) {
		int offset = input & 255;
		return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzAtEOF = false;
		zzAtBOL = true;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false}, iff there was new input.
	 */
	private boolean zzRefill() {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Reports an error that occurred while scanning.
	 * <p>
	 * In a well-formed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the error message to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public int yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				switch (zzLexicalState) {
					case YYINITIAL: {
						return 0;
					}  // fall though
					case 57:
						break;
					case PROPERTY_VALUE: {
						return 0;
					}  // fall though
					case 58:
						break;
					case CODE: {
						return 0;
					}  // fall though
					case 59:
						break;
					case NOTATION: {
						return 0;
					}  // fall though
					case 60:
						break;
					default:
						return YYEOF;
				}
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1: {
						addToken(TokenTypes.IDENTIFIER);
					}
					// fall through
					case 19:
						break;
					case 2: {
						addToken(TokenTypes.WHITESPACE);
					}
					// fall through
					case 20:
						break;
					case 3: {
						addToken(TokenTypes.PREPROCESSOR);
					}
					// fall through
					case 21:
						break;
					case 4: {
						addToken(TokenTypes.SEPARATOR);
						yybegin(PROPERTY_VALUE);
					}
					// fall through
					case 22:
						break;
					case 5: {
						addToken(TokenTypes.MARKUP_CDATA);
					}
					// fall through
					case 23:
						break;
					case 6: {
						addToken(TokenTypes.SEPARATOR);
						yybegin(YYINITIAL);
					}
					// fall through
					case 24:
						break;
					case 7: {
						addToken(TokenTypes.SEPARATOR);
						yybegin(NOTATION);
					}
					// fall through
					case 25:
						break;
					case 8: {
						addToken(TokenTypes.SEPARATOR);
					}
					// fall through
					case 26:
						break;
					case 9: {
						addToken(TokenTypes.RESERVED_WORD);
					}
					// fall through
					case 27:
						break;
					case 10: {
						addToken(TokenTypes.LITERAL_BOOLEAN);
					}
					// fall through
					case 28:
						break;
					case 11: {
						addToken(TokenTypes.SEPARATOR);
						yybegin(CODE);
					}
					// fall through
					case 29:
						break;
					case 12: {
						addToken(TokenTypes.OPERATOR);
					}
					// fall through
					case 30:
						break;
					case 13: {
						addToken(TokenTypes.ANNOTATION);
					}
					// fall through
					case 31:
						break;
					case 14: {
						addToken(TokenTypes.DATA_TYPE);
					}
					// fall through
					case 32:
						break;
					case 15: {
						addToken(TokenTypes.COMMENT_EOL);
					}
					// fall through
					case 33:
						break;
					case 16: {
						addToken(TokenTypes.REGEX);
						yybegin(CODE);
					}
					// fall through
					case 34:
						break;
					case 17: {
						addToken(TokenTypes.REGEX);
					}
					// fall through
					case 35:
						break;
					case 18: {
						addToken(TokenTypes.MARKUP_DTD);
					}
					// fall through
					case 36:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}
