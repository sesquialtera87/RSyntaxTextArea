// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: BibTexTokenMaker.flex
package org.fife.ui.rsyntaxtextarea.modes;

import org.fife.ui.rsyntaxtextarea.AbstractTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenMap;

import javax.swing.text.Segment;
import java.io.IOException;

public class BibTexTokenMaker extends AbstractTokenMaker {

	/**
	 * This character denotes the end of the file
	 */
	public static final int YYEOF = -1;

	/**
	 * lexical states
	 */
	public static final int YYINITIAL = 0;
	public static final int ENTRY_BODY = 2;
	public static final int IDENTIFIER = 4;
	public static final int STRING = 6;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
	 * at the beginning of a line
	 * l is of the form l = 2*k, k a non-negative integer
	 */
	private static final int[] ZZ_LEXSTATE = {
		0, 0, 1, 1, 2, 2, 3, 3
	};

	/**
	 * Top-level table for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

	private static final String ZZ_CMAP_TOP_PACKED_0 =
		"\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

	private static int[] zzUnpackcmap_top() {
		int[] result = new int[4352];
		int offset = 0;
		offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_top(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Second-level tables for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

	private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
		"\11\0\2\1\2\2\1\1\22\0\1\1\1\0\1\3" +
		"\1\4\10\0\1\5\3\0\12\6\3\0\1\7\2\0" +
		"\1\10\32\11\1\0\1\12\4\0\32\11\1\13\1\0" +
		"\1\14\7\0\1\2\u01a2\0\2\2\326\0\u0100\2";

	private static int[] zzUnpackcmap_blocks() {
		int[] result = new int[1024];
		int offset = 0;
		offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_blocks(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in an unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 =
		"\4\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6" +
		"\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\15" +
		"\1\16\1\15\1\17\1\20";

	private static int[] zzUnpackAction() {
		int[] result = new int[23];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 =
		"\0\0\0\15\0\32\0\47\0\64\0\101\0\116\0\64" +
		"\0\64\0\64\0\133\0\64\0\150\0\165\0\64\0\64" +
		"\0\202\0\64\0\64\0\64\0\165\0\116\0\165";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[23];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0;  /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length() - 1;
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpacktrans();

	private static final String ZZ_TRANS_PACKED_0 =
		"\1\5\1\6\1\0\5\5\1\7\2\5\1\10\2\5" +
		"\1\6\1\0\1\11\1\12\1\5\1\13\1\14\1\5" +
		"\1\15\1\16\1\17\1\20\5\21\1\22\7\21\1\23" +
		"\1\6\1\0\1\24\6\23\1\25\2\23\16\0\1\6" +
		"\24\0\1\26\11\0\1\13\17\0\1\15\14\0\1\27" +
		"\3\0\5\21\1\0\7\21";

	private static int[] zzUnpacktrans() {
		int[] result = new int[143];
		int offset = 0;
		offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpacktrans(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}


	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String[] ZZ_ERROR_MSG = {
		"Unknown internal scanner error",
		"Error: could not match input",
		"Error: pushback value was too large"
	};

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 =
		"\4\0\1\11\2\1\3\11\1\1\1\11\2\1\2\11" +
		"\1\1\3\11\3\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[23];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0;       /* index in packed string  */
		int j = offset;  /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do result[j++] = value; while (--count > 0);
		}
		return j;
	}

	/**
	 * the current state of the DFA
	 */
	private int zzState;

	/**
	 * the current lexical state
	 */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is
	 * the source of the yytext() string
	 */
	private CharSequence zzBuffer = "";

	/**
	 * the textposition at the last accepting state
	 */
	private int zzMarkedPos;

	/**
	 * the current text position in the buffer
	 */
	private int zzCurrentPos;

	/**
	 * startRead marks the beginning of the yytext() string in the buffer
	 */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read
	 * from input
	 */
	private int zzEndRead;

	/**
	 * zzAtEOF == true <=> the scanner is at the EOF
	 */
	private boolean zzAtEOF;

	/* user code: */
	public static final int TOKEN_ENTRY = 0;
	public static final int TOKEN_CITATION_KEY = 1;
	public static final int TOKEN_TAG = 2;
	public static final int TOKEN_TEX_COMMAND = 3;

	/**
	 * Default {@link org.fife.ui.rsyntaxtextarea.TokenTypes} for some syntax elements of the BibTex file.
	 * Customizable elements are:
	 * <ul>
	 *     <li>entry types, i.e. {@code @xxxxxxx} tokens</li>
	 *     <li>citation keys, i.e. the unique identifier of each record</li>
	 *     <li>entry tags (author, title...)</li>
	 *     <li>LaTex commands ({@code \command})</li>
	 * </ul>
	 * <p>
	 * To change the default {@link org.fife.ui.rsyntaxtextarea.TokenTypes}, set the related entry in the
	 * {@code tokenTypes} array: {@code tokenTypes[TOKEN_TAG] = Token.DATA_TYPE}
	 *
	 * @see BibTexTokenMaker#TOKEN_ENTRY
	 * @see BibTexTokenMaker#TOKEN_CITATION_KEY
	 * @see BibTexTokenMaker#TOKEN_TAG
	 * @see BibTexTokenMaker#TOKEN_TEX_COMMAND
	 */
	static final int[] tokenTypes = {Token.VARIABLE, Token.DATA_TYPE, Token.REGEX, Token.FUNCTION};

	boolean propertyValue = false;
	int braceDelta;
	int start;
	Segment s;

	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public BibTexTokenMaker() {
		super();
	}

	protected void addToken(int tokenType) {
		super.addToken(s.array, s.offset + zzStartRead, s.offset + zzMarkedPos - 1, tokenType, start + zzStartRead);
	}

	protected void addEndToken() {
		int type = -(1 + yystate() + 100 * Math.max(0, braceDelta));
		super.addToken(s.array, start, start - 1, type, start);
	}

	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[]{null, null};
	}

	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
		resetTokenList();

		int state = 0;

		if (initialTokenType < 0) {
			initialTokenType = -initialTokenType;
			braceDelta = initialTokenType / 100;
			state = initialTokenType - 100 * braceDelta - 1;
		} else {
			braceDelta = 0;
		}

		propertyValue = braceDelta > 0;

		try {
			s = text;
			start = startOffset;
			reset(text, 0, text.count, state);
			yylex();
			addEndToken();
		} catch (IOException e) {
			throw new RuntimeException(e);
		}

		return firstToken;
	}

	@Override
	public TokenMap getWordsToHighlight() {
		return null;
	}


	/**
	 * Translates raw input code points to DFA table row
	 */
	private static int zzCMap(int input) {
		int offset = input & 255;
		return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
	}

	public void reset(CharSequence buffer, int start, int end, int initialState) {
		zzBuffer = buffer;
		zzCurrentPos = zzMarkedPos = zzStartRead = start;
		zzAtEOF = false;
		zzEndRead = end;
		yybegin(initialState);
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false}, iff there was new input.
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() {
		return true;
	}


	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}


	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}


	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final CharSequence yytext() {
		return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
	}


	/**
	 * Returns the character at position {@code pos} from the
	 * matched text.
	 * <p>
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch.
	 *            A value from 0 to yylength()-1.
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer.charAt(zzStartRead + pos);
	}


	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}


	/**
	 * Reports an error that occurred while scanning.
	 * <p>
	 * In a wellformed scanner (no or only correct usage of
	 * yypushback(int) and a match-all fallback rule) this method
	 * will only be called with things that "Can't Possibly Happen".
	 * If this method is called, something is seriously wrong
	 * (e.g. a JFlex bug producing a faulty scanner etc.).
	 * <p>
	 * Usual syntax/scanner level error handling should be done
	 * in error fallback rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}


	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * <p>
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again.
	 *               This number must not be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}


	/**
	 * Resumes scanning until the next regular expression is matched,
	 * the end of input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @throws java.io.IOException if any I/O-Error occurs
	 */
	public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		CharSequence zzBufferL = zzBuffer;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}


			zzForAction:
			{
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
					if (zzNext == -1) break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
				zzAtEOF = true;
				return null;
			} else {
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
					case 1: {
						addToken(Token.IDENTIFIER);
					}
					// fall through
					case 17:
						break;
					case 2: {
						addToken(Token.WHITESPACE);
					}
					// fall through
					case 18:
						break;
					case 3: {
						addToken(Token.SEPARATOR);
						yybegin(IDENTIFIER);
					}
					// fall through
					case 19:
						break;
					case 4: {
						addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
						yybegin(STRING);
					}
					// fall through
					case 20:
						break;
					case 5: {
						if (propertyValue && braceDelta == 0) addToken(Token.OPERATOR);
						else addToken(Token.IDENTIFIER);
					}
					// fall through
					case 21:
						break;
					case 6: {
						if (propertyValue && braceDelta == 0) addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
						else addToken(Token.IDENTIFIER);
					}
					// fall through
					case 22:
						break;
					case 7: {
						addToken(Token.OPERATOR);
						propertyValue = true;
					}
					// fall through
					case 23:
						break;
					case 8: {
						if (propertyValue) addToken(Token.IDENTIFIER);
						else addToken(tokenTypes[TOKEN_TAG]);
					}
					// fall through
					case 24:
						break;
					case 9: {
						addToken(Token.SEPARATOR);
						braceDelta++;
					}
					// fall through
					case 25:
						break;
					case 10: {
						addToken(Token.SEPARATOR);
						braceDelta--;
						if (braceDelta == 0) propertyValue = false;
						if (braceDelta < 0) yybegin(YYINITIAL);
					}
					// fall through
					case 26:
						break;
					case 11: {
						addToken(tokenTypes[TOKEN_CITATION_KEY]);
					}
					// fall through
					case 27:
						break;
					case 12: {
						addToken(Token.IDENTIFIER);
						yybegin(ENTRY_BODY);
						braceDelta = 0;
					}
					// fall through
					case 28:
						break;
					case 13: {
						addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
					}
					// fall through
					case 29:
						break;
					case 14: {
						addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
						yybegin(ENTRY_BODY);
					}
					// fall through
					case 30:
						break;
					case 15: {
						addToken(tokenTypes[TOKEN_ENTRY]);
					}
					// fall through
					case 31:
						break;
					case 16: {
						addToken(tokenTypes[TOKEN_TEX_COMMAND]);
					}
					// fall through
					case 32:
						break;
					default:
						zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}


}
